datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bingo         Bingo?    @relation("UserToBingo")
  shares        Share[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bingo {
  id      String  @id @default(cuid())
  cells   Cell[]
  user    User    @relation("UserToBingo", fields: [userId], references: [id], onDelete: Cascade)
  userId  String  @unique
}

model Cell {
  id          Int      @id @default(autoincrement())
  bingoId     String
  bingo       Bingo    @relation(fields: [bingoId], references: [id], onDelete: Cascade)
  text        String
  max         Int
  notes       String   @default("")
  actual      Int
  checked     Boolean
  isPrivate   Boolean  @default(false)
}

model Share {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  isActive    Boolean   @default(true)
}